<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>GPTAnki</title>
    <style>
        :root {
            --primary-color: #007bff;
            --background-light: #f4f4f4;
            --white: #ffffff;
            --text-dark: #333;
            --error-bg: #f8d7da;
            --error-text: #721c24;
            --success-bg: #d4edda;
            --success-text: #155724;
        }
        * {
            box-sizing: border-box;
            transition: all 0.3s ease;
        }
        body {
            font-family: 'Inter', 'Arial', sans-serif;
            margin: 0;
            padding: 0;
            background-color: var(--background-light);
            color: var(--text-dark);
            line-height: 1.6;
        }
        .app-container {
            max-width: 900px;
            margin: 0 auto;
            padding: 20px;
            background-color: var(--white);
            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
        }
        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            border-bottom: 2px solid var(--primary-color);
            padding-bottom: 10px;
        }
        .header h1 {
            margin: 0;
            font-size: 2rem;
            color: var(--primary-color);
        }
        .info-section {
            background-color: #f0f4f8;
            border-left: 5px solid var(--primary-color);
            padding: 15px;
            margin-bottom: 20px;
            font-size: 0.9em;
        }
        .input-group {
            margin-bottom: 15px;
        }
        .input-group label {
            display: block;
            margin-bottom: 5px;
            font-weight: 600;
        }
        #mcqText, #filename {
            width: 100%;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
        }
        #mcqText {
            min-height: 250px;
            resize: vertical;
        }
        .button-group {
            display: flex;
            gap: 10px;
            margin-top: 15px;
        }
        .btn {
            padding: 10px 20px;
            background-color: var(--primary-color);
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-weight: 600;
        }
        .btn:hover {
            opacity: 0.9;
        }
        .btn:disabled {
            background-color: #cccccc;
            cursor: not-allowed;
        }
        .btn-secondary {
            background-color: #6c757d;
        }
        #validationMessage {
            margin-top: 15px;
            padding: 10px;
            border-radius: 4px;
            font-size: 0.9em;
        }
        .error-message {
            background-color: var(--error-bg);
            color: var(--error-text);
            border: 1px solid #f5c6cb;
        }
        .success-message {
            background-color: var(--success-bg);
            color: var(--success-text);
            border: 1px solid #c3e6cb;
        }
        .advanced-options {
            background-color: #f8f9fa;
            border: 1px solid #e9ecef;
            padding: 15px;
            margin-bottom: 15px;
            border-radius: 4px;
        }
        .advanced-option {
            display: flex;
            align-items: center;
            margin-bottom: 10px;
        }
        .advanced-option label {
            margin-left: 10px;
        }
    </style>
</head>
<body>
    <div class="app-container">
        <div class="header">
            <h1>GPTAnki</h1>
            <button id="advancedToggle" class="btn btn-secondary">Advanced Options</button>
        </div>

        <div class="info-section">
            <h3>MCQ Generation Prompt for ChatGPT</h3>
            <pre>
make 5 mcqs on the provided material
on these levels of thinking (according to Bloom's Taxonomy)
1,2,3,4,5,6

Format strictly as: 
question|answerA|answerB|answerC|answerD|correctAnswer

EXAMPLE:
What is the capital of France?|Paris|London|Berlin|Madrid|A
What is 2 + 2?|3|4|5|6|B

Copy-friendly format</pre>
        </div>

        <div id="advancedOptions" class="advanced-options" style="display:none;">
            <div class="advanced-option">
                <input type="checkbox" id="trimWhitespace" checked>
                <label for="trimWhitespace">Trim Whitespace</label>
            </div>
            <div class="advanced-option">
                <input type="checkbox" id="escapeSpecialChars" checked>
                <label for="escapeSpecialChars">Escape Special Characters</label>
            </div>
        </div>

        <div class="input-group">
            <label for="filename">Filename (default: MCQ):</label>
            <input type="text" id="filename" value="MCQ">
        </div>

        <div class="input-group">
            <label for="mcqText">Paste your MCQs (format: question|answerA|answerB|answerC|answerD|correctAnswer):</label>
            <textarea id="mcqText" placeholder="Paste your multiple-choice questions here..."></textarea>
        </div>

        <div id="validationMessage"></div>

        <div class="button-group">
            <button id="generateButton" class="btn">Generate CSV</button>
            <button id="downloadButton" class="btn" style="display:none;">Download CSV</button>
            <button id="clearButton" class="btn btn-secondary">Clear</button>
        </div>
    </div>

    <script>
        // Advanced options toggle
        document.getElementById('advancedToggle').addEventListener('click', function() {
            const advancedOptions = document.getElementById('advancedOptions');
            advancedOptions.style.display = advancedOptions.style.display === 'none' ? 'block' : 'none';
        });

        // Validation function
        function validateMCQs(text) {
            const lines = text.trim().split('\n');
            const validationMessage = document.getElementById('validationMessage');
            validationMessage.innerHTML = '';
            validationMessage.className = '';

            const invalidLines = lines.filter(line => {
                const parts = line.split('|');
                return parts.length !== 6 || 
                       !['A', 'B', 'C', 'D'].includes(parts[5].trim());
            });

            if (invalidLines.length > 0) {
                validationMessage.innerHTML = `
                    <strong>Invalid MCQ Format Detected!</strong><br>
                    • Ensure each line has 6 parts separated by '|'<br>
                    • Correct answer must be A, B, C, or D<br>
                    • Invalid lines: ${invalidLines.length}
                `;
                validationMessage.classList.add('error-message');
                return false;
            }

            validationMessage.innerHTML = `
                <strong>MCQs Validated Successfully!</strong><br>
                • Total MCQs: ${lines.length}
                • Columns: Question, A, B, C, D, Correct Answer
            `;
            validationMessage.classList.add('success-message');
            return true;
        }

        // CSV Generation Function
        function generateCSV() {
            const text = document.getElementById('mcqText').value;
            const filename = document.getElementById('filename').value || 'MCQ';
            const generateButton = document.getElementById('generateButton');
            const downloadButton = document.getElementById('downloadButton');

            // Validation
            if (!validateMCQs(text)) {
                downloadButton.style.display = 'none';
                return;
            }

            const trimWhitespace = document.getElementById('trimWhitespace').checked;
            const escapeSpecialChars = document.getElementById('escapeSpecialChars').checked;

            const lines = text.trim().split('\n');
            let csvContent = '';

            lines.forEach(line => {
                const parts = line.split('|');
                const processedParts = parts.map(part => {
                    let processed = trimWhitespace ? part.trim() : part;
                    if (escapeSpecialChars) {
                        processed = processed.replace(/"/g, '""');
                    }
                    return processed;
                });

                const [question, answerA, answerB, answerC, answerD, correctAnswer] = processedParts;

                // Build the row with correct answer in J column
                const row = `"${question}","${answerA}","${answerB}","${answerC}","${answerD}","","","","","${correctAnswer}"\n`;
                csvContent += row;
            });

            // Create Blob and show download button
            const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
            const link = document.createElement('a');
            const url = URL.createObjectURL(blob);
            link.setAttribute('href', url);
            link.setAttribute('download', `${filename}.csv`);
            downloadButton.style.display = 'inline-block';
            downloadButton.onclick = () => {
                link.click();
                URL.revokeObjectURL(url);
            };
        }

        // Event Listeners
        document.getElementById('generateButton').addEventListener('click', generateCSV);
        document.getElementById('clearButton').addEventListener('click', () => {
            document.getElementById('mcqText').value = '';
            document.getElementById('validationMessage').innerHTML = '';
            document.getElementById('downloadButton').style.display = 'none';
        });
        document.getElementById('mcqText').addEventListener('input', function() {
            validateMCQs(this.value);
        });
    </script>
</body>
</html>
